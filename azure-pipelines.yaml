name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'SHA256:3ZaIIWlSjgqZ/eN5hPXtAiLBrivfrL8QkV9qlMDngK4 jantzilla@LAPTOP-KLHL6MFI'
        sshPublicKey: '$(myPubKey)'
        sshKeySecureFile: 'id_rsa'

    - script: 'terraform init'
      workingDirectory: terraform
      displayName: 'Initialize Terraform Resources'
    - script: 'terraform apply -auto-approve'
      workingDirectory: terraform
      displayName: 'Apply Terraform Resources'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'automatedtesting'
        targetPath: 'automatedtesting'
        publishLocation: 'pipeline'

    - script: 'npm install -g newman'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Install newman'
    - script: 'newman run Regression.json -e Environment.json --delay-request 4000 --reporters cli,junit --reporter-junit-export results/regressionReport.xml '
      workingDirectory: automatedtesting/postman
      displayName: 'Run API Tests'
      continueOnError: true
    - task: PublishTestResults@2
      displayName: 'Publish Regression Test Results'
      inputs:
        testResultsFiles: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/results/*.xml'

    - script: 'newman run DataValidation.json -e Environment.json --delay-request 4000 --reporters cli,junit --reporter-junit-export results/dataValidationReport.xml '
      workingDirectory: automatedtesting/postman
      displayName: 'Run API Tests'
      continueOnError: true
    - task: PublishTestResults@2
      displayName: 'Publish Data Validation Test Results'
      inputs:
        testResultsFiles: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/results/*.xml'
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'my_service_connection'
              appName: 'webapp-appservice-64078'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    environment: 
      name:  VMEnv
      resourceType: VirtualMachine
      # tags: TAG NAME
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get update -y
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
              
          - script: | 
              # Install ChromeDriver.
              wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w 8a8b64fa-ba36-4f8c-bfdc-7c5be1159f57 -s 0ZzYtpmatrGwZMRrx2xircMdjzHUVVgVxAfy0/f9F7thdlc49ugagbzg+p9FNN7mBUpHcxCYI6hutmQRx/DyIA== -d opinsights.azure.com
              CHROME_DRIVER_VERSION=`curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE`
              wget -N https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip -P ~/
              unzip ~/chromedriver_linux64.zip -d ~/
              rm ~/chromedriver_linux64.zip
              sudo mv -f ~/chromedriver /usr/local/bin/chromedriver
              sudo chown root:root /usr/local/bin/chromedriver
              sudo chmod 0755 /usr/local/bin/chromedriver
              sudo find / -type f -name chromedriver
              # export PATH=$PATH:/snap/bin/chromium.chromedriver
              # echo $PATH
              sudo mkdir -p /logs
              sudo chmod 777 /logs
              python3 test.py | tee -a /logs/output.txt
            workingDirectory: '$(Pipeline.Workspace)/automatedtesting/selenium'
            displayName: 'Run Functional Tests'
    
    variables:
      host: webapp-appservice-64078.azurewebsites.net

  - job: jmeter
    pool:
      vmImage: ubuntu-latest
    displayName: Run JMeter tests
    steps:
    - task: Bash@3
      displayName: Execute JMeter Endurance Test
      continueOnError: true
      inputs:
        targetType: filePath
        filePath: 'automatedtesting/jmeter/endurance.sh'
        arguments: '$PWD Endurance.jmx $(host)'
        workingDirectory: automatedtesting/jmeter
        # failOnStderr: true
    # - task: PublishPipelineArtifact@1
    #   displayName: Publish JMeter Endurance Test Report
    #   inputs:
    #     targetPath: automatedtesting/jmeter
    #     artifact: enduranceReport
    - task: Bash@3
      displayName: Execute JMeter Stress Test
      continueOnError: true
      inputs:
        targetType: filePath
        filePath: 'automatedtesting/jmeter/stress.sh'
        arguments: '$PWD Stress.jmx $(host)'
        workingDirectory: automatedtesting/jmeter
        failOnStderr: true
    # - task: PublishPipelineArtifact@1
    #   displayName: Publish JMeter Stress Test Report
    #   inputs:
    #     targetPath: automatedtesting/jmeter
    #     artifact: stressReport